Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?

a2 holds 13 ,   a0-a7 保存参数,超出则存放在 stack 里


Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)

26:	45b1                	li	a1,12

被编译器优化成内联 , 没有函数调用了 , 直接计算出结果

g 也被 inline 了
14:	250d                	addiw	a0,a0,3


At what address is the function printf located?

0000000000000628 <printf>:


What value is in the register ra just after the jalr to printf in main?

38:	4501                	li	a0,0



Run the following code.

	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);

What is the output? Here's an ASCII table that maps bytes to characters.
The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?

Here's a description of little- and big-endian and a more whimsical description.

57616=0xe110

He110,World

72=r , 6c=l , 64=d

小端序

如果 riscv 是大端, 倒转过来, 0x726c6400

如何把小端变大端?

c = 0x0
a = 0x00646c72
b = 0x000000ff

c = a & b = 0x00000072
a >>8 ( a= 0x0000646c)
c << 8 ( c = 0x00007200 )
d = a & b = 0x0000006c
c = c | d = 0x0000726c
...

while (a!=0) {
    c = c | (a & b )
    a >> 8
    c << 8
}

In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?

	printf("x=%d y=%d", 3);


x=3 y=5218

因为第二个参数没传, 内核直接取第二个寄存器的值, 第二个寄存器的值可能是之前遗留的任何值


汇编全部加上注释 , 画出 stack
https://chenlangping.github.io/2021/04/19/xv6-2020-lab4%E8%A7%A3%E6%9E%90/
riscv  c 汇编 调用 解析   用到的寄存器 指令 可能在课程里有讲到，看视频，你跳过了
https://mit-public-courses-cn-translatio.gitbook.io/mit6-s081/lec05-calling-conventions-and-stack-frames-risc-v/5.5-stack

user/_call:     file format elf64-littleriscv


Disassembly of section .text:

0000000000000000 <g>:
#include "kernel/param.h"
#include "kernel/types.h"
#include "kernel/stat.h"
#include "user/user.h"

int g(int x) {
   0:	1141                	addi	sp,sp,-16
   2:	e422                	sd	s0,8(sp)
   4:	0800                	addi	s0,sp,16
  return x+3;
}
   6:	250d                	addiw	a0,a0,3
   8:	6422                	ld	s0,8(sp)
   a:	0141                	addi	sp,sp,16
   c:	8082                	ret

000000000000000e <f>:

int f(int x) {
   e:	1141                	addi	sp,sp,-16
  10:	e422                	sd	s0,8(sp)
  12:	0800                	addi	s0,sp,16
  return g(x);
}
  14:	250d                	addiw	a0,a0,3
  16:	6422                	ld	s0,8(sp)
  18:	0141                	addi	sp,sp,16
  1a:	8082                	ret

000000000000001c <main>:

void main(void) {
  1c:	1141                	addi	sp,sp,-16
  1e:	e406                	sd	ra,8(sp)
  20:	e022                	sd	s0,0(sp)
  22:	0800                	addi	s0,sp,16
  printf("%d %d\n", f(8)+1, 13);
  24:	4635                	li	a2,13
  26:	45b1                	li	a1,12
  28:	00000517          	auipc	a0,0x0
  2c:	7b850513          	addi	a0,a0,1976 # 7e0 <malloc+0xea>
  30:	00000097          	auipc	ra,0x0
  34:	608080e7          	jalr	1544(ra) # 638 <printf>
  exit(0);
  38:	4501                	li	a0,0
  3a:	00000097          	auipc	ra,0x0
  3e:	276080e7          	jalr	630(ra) # 2b0 <exit>

0000000000000042 <strcpy>:
#include "kernel/fcntl.h"
#include "user/user.h"


Stack
                   .
                   .
      +->          .
      |   +-----------------+   |
      |   | return address  |   |
      |   |   previous fp ------+
      |   | saved registers |
      |   | local variables |
      |   |       ...       | <-+
      |   +-----------------+   |
      |   | return address  |   |
      +------ previous fp   |   |
          | saved registers |   |
          | local variables |   |
      +-> |       ...       |   |
      |   +-----------------+   |
      |   | return address  |   |
      |   |   previous fp ------+
      |   | saved registers |
      |   | local variables |
      |   |       ...       | <-+
      |   +-----------------+   |
      |   | return address  |   |
      +------ previous fp   |   |
          | saved registers |   |
          | local variables |   |
  $fp --> |       ...       |   |
          +-----------------+   |
          | return address  |   |
          |   previous fp ------+
          | saved registers |
  $sp --> | local variables |
          +-----------------+
