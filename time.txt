1



总结:

有很多坏习惯 , 养成了就难改

每个函数都要加定义注释 , 说明函数是做什么用的, 参数, 返回什么

代码设计
函数接口设计 , 参数设计 , 定义 什么的

代码里的 if else 代码块 含义 设计 , 变量定义



xv6 int addr 的 bug , 地址应该是 uint64 ,

stval 是 被调用方不会还原的寄存器 , 要在一开始就存好

一个函数别做太多事, 还把 p->killed 写里面了,  内核里的 walkaddr 根本不需要 kill 进程 , 而且内核里是软件 walk 页表,根本没有触发 pgfault , 也就没有 stval , 还傻傻的去 stval 取


这两个地方还是不知道 < 和 >= 是怎么判断出来的

PGROUNDUP 是往高地址 ROUND 的

if (va < PGROUNDUP(ustack)) {
        return 0;

    } else if (va >= p->sz) {
        return 0;
    } else {


    }


    使用某个函数的时候看其他地方是怎么调用的, 看看函数接口定义 , 要做好错误处理



    不要用 ide 的 refactor 功能随便把某块代码封装成函数 , 如果要封装得先定义好函数接口 , 清楚函数是做什么用的


    lazy alloc , walk 页表的可能情况 , 没有 pte ( pte 为 0) , 或 pte_v 为 0, pte_u 为 0

    修改某个函数时也要清楚函数的定义, 参数 , 返回值定义 , 理解函数的作用 , 避免把函数语义给篡改了

    找本书或课程看看 , 关于代码设计, 维护的 , 坏习惯

    列出所有的坏习惯, 写代码前看看

    学习 lazy-debug 的写法